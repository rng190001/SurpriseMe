# -*- coding: utf-8 -*-
"""Dialog-Input-Validation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kQgCBmOa9_T6pqtbGn87zkVhjQ-dBpK8
"""
import pandas as pd

def ask_question(prompt):
    return input(f"{prompt}\nYou: ")


def validate_input(text, category):
    if category == "holiday":
      if text.lower() not in ["christmas", "anniversary"]:
        return False, "Please select either 'Christmas' or 'Anniversary'."
    elif category == "relationship":
      if text.lower() not in ["partner", "parent", "sibling", "friend", "child", "grandparent"]:
        return False, "Please select one option from 'Partner', 'Parent', 'Sibling', 'Friend', 'Child', or 'Grandparent'."
    elif category == "gender":
      if text.lower() not in ["female", "male"]:
        return False, "Please select either 'Male' or 'Female'."
    elif category in ["age", "minBudget", "maxBudget"]: # handles the integer ones together since code is very similar
        try:
            value = int(text)
            if value < 0:
                return False, f"Please enter a non-negative integer for {category}."
            if category == "age" and value == 0:
                return False, "Please enter a positive integer for age."
        except ValueError:
            return False, f"Please enter a valid integer for {category}."
    elif category == "hobbies":
        valid_hobbies = ["sports", "technology", "books", "food", "cooking", "home", "entertainment", "art", "fashion", "outdoors", "comedy", "organization", "self-care", "photography", "work"]
        if text.lower().strip("") not in valid_hobbies:
            return False, f"Invalid hobby '{text}'. Please select from: {', '.join(valid_hobbies)}."
    elif category == "fashion":
        if text.lower() not in ["clothing", "accessory", "both"]:
          return False, "Please select one option between clothing, accessory, or both."
    return True, ""

def start_chatbot():
    user_info = {}

    # Process holiday user input
    temp_holiday = ask_question("Welcome! Which holiday are you looking to purchase a gift for?\nOptions: Christmas, Anniversary")
    valid, message = validate_input(temp_holiday, "holiday")
    while not valid:
        temp_holiday = ask_question(message)
        valid, message = validate_input(temp_holiday, "holiday")
    user_info["holiday"] = temp_holiday

    # Process relationship user input
    temp_relationship = ask_question("Great! Who are you shopping for?\nOptions: Partner, Parent, Sibling, Friend, Child, Grandparent")
    valid, message = validate_input(temp_relationship, "relationship")
    while not valid:
        temp_relationship = ask_question(message)
        valid, message = validate_input(temp_relationship, "relationship")
    user_info["relationship"] = temp_relationship


    # Process gender user input
    temp_gender = ask_question("Awesome! What is their gender?\nOptions: Female, Male")
    valid, message = validate_input(temp_gender, "gender")
    while not valid:
      temp_gender = ask_question(message)
      valid, message = validate_input(temp_gender, "gender")
    user_info["gender"] = temp_gender

    # Process age user input
    temp_age = ask_question("Excellent! Whatâ€™s their age?")
    valid, message = validate_input(temp_age, "age")
    while not valid:
      temp_age = ask_question(message)
      valid, message = validate_input(temp_age, "age")
    user_info["age"] = temp_age

    # Process budget range user inputs
    temp_min_budget = ask_question("Perfect! What is your minimum budget value? (dollars)")
    valid, message = validate_input(temp_min_budget, "minBudget")
    while not valid:
      temp_min_budget = ask_question(message)
      valid, message = validate_input(temp_min_budget, "minBudget")
    user_info["minBudget"] = temp_min_budget

    temp_max_budget = ask_question("Sure thing! What is your maximum budget value (dollars)?")
    valid, message = validate_input(temp_max_budget, "maxBudget")
    while not valid:
      temp_max_budget = ask_question(message)
      valid, message = validate_input(temp_max_budget, "maxBudget")
    user_info["maxBudget"] = temp_max_budget

    # Process hobby user input
    temp_hobbies = ask_question("Got it! What are their hobbies or interests? (comma-separated)\nOptions (multi-select): Sports, Technology, Books, Fashion, Food, Outdoors, Home, Comedy, Organization, Entertainment, Cooking, Art, Work, Self-care, Photography")
    user_info["hobbies"] = []
    fashion = False

    while True:
      hobbies = [hobby.strip() for hobby in temp_hobbies.split(", ")]
      all_input_valid = True
      validated_hobbies = set()

      for hobby in hobbies:
          valid, message = validate_input(hobby, "hobbies")
          if not valid:
              temp_hobbies = ask_question(message)
              all_input_valid = False
              break

          validated_hobbies.add(hobby.lower())

      if all_input_valid:
        if "fashion" in validated_hobbies:
          fashion = True
        user_info["hobbies"] = list(validated_hobbies)
        break

    # Given fashion hobby is selected, process follow up question
    if fashion:
      temp_fashion = ask_question("Since you selected fashion, would you prefer to look into a clothing, accessory, or both?")
      valid, message = validate_input(temp_fashion, "fashion")
      while not valid:
        temp_fashion = ask_question(message)
        valid, message = validate_input(temp_fashion, "fashion")
      if temp_fashion == "both":
        user_info["hobbies"].extend(["clothing", "accessory"])
      elif temp_fashion == "clothing":
        user_info["hobbies"].append("clothing")
      elif temp_fashion == "accessory":
        user_info["hobbies"].append("accessory")

    return user_info

def main():
    giftsFile = "GiftDatabase.csv"
    giftsData = pd.read_csv(giftsFile).dropna()

    user_info = start_chatbot()
    print(user_info)
    # Need to consider how to place budget within a range: Under $25, $25-$50, $50-$100, Over $100"

if __name__ == '__main__':
    main()

